<div class="table-details">
    <div class="return-buttons">
        <a href="/tables" class="return-button">Return to Tables</a>
        <a href="/tables/<%= table._id %>" class="delete-button">Delete</a>
    </div>

    <div class="form-update-table">
        <h2><%= title %></h2>

        <form action="/tables/update-table" method="POST">
            <input type="hidden" name="_id" value="<%= table._id %>">

            <input type="hidden" id="staff_in_charge" name="staff_in_charge" value="<%= user.id %>">

            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" name="name" value="<%= table.name %>" required>
            </div>  

            <!-- Hidden fields to hold the order data -->
            <input type="hidden" id="order_data" name="currentOrder">
        
            <div class="form-group">
                <label for="status">Status:</label>
                <select id="status" name="status" required>
                    <option value="AVAILABLE" <%= table.status === 'AVAILABLE' ? 'selected' : '' %>>Available</option>
                    <option value="OCCUPIED" <%= table.status === 'OCCUPIED' ? 'selected' : '' %>>Occupied</option>
                    <option value="RESERVED" <%= table.status === 'RESERVED' ? 'selected' : '' %>>Reserved</option>
                </select>
            </div>
        
            <!-- Order Table -->
            <table id="table_table" class="order-table" aria-disabled="true">
                <thead>
                    <tr>
                        <th>Dish</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (table.currentOrder._id && table.currentOrder.order_details.length > 0) { %>
                        <% table.currentOrder.order_details.forEach(detail => { %>
                            <tr data-dish-id="<%= detail.dish_id._id %>">
                                <td><%= detail.dish_id.name %></td>
                                <td>$<%= detail.dish_id.price.toFixed(2) %></td>
                                <td class="quantity-cell">
                                    <input type="number" class="quantity-input" value="<%= detail.quantity %>" min="0" disabled>
                                </td>
                                <td class="total-cell">$<%= (detail.dish_id.price * detail.quantity).toFixed(2) %></td>
                            </tr>
                        <% }) %>
                    <% }else{ %>
                    <!-- "No orders placed" message, hidden when orders are added -->
                    <tr class="no-orders">
                        <td colspan="4">No order placed</td>
                    </tr>
                    <% } %>
                </tbody>
            </table>
            <% if (!table.currentOrder._id && table.currentOrder.order_details.length === 0) { %>
            <div class="form-group">
                <a href="javascript:void(0);" class="add-order-button">Add Order</a>
            </div>
            <% } %>
            <!-- Total Amount -->
            <div>
                <label for="total_amount">Total Amount ($):</label>
                <input type="number" id="total_amount" name="total_amount" disabled value="<%= table.currentOrder.total_amount %>">
            </div>

            <!-- Submit Button -->
            <button type="submit" class="submit-button">Save Changes</button>
        </form>
    </div>

<!-- Modal Structure -->
<div id="miniOrderModal" class="modal">
    <div class="modal-content">
        <span id="closeMiniOrderModal" class="close">&times;</span>
        <h2>Add New Order</h2>

        <div class="form-group">
            <label for="mini_dish_selector">Dish:</label>
            <select id="mini_dish_selector" required>
                <% Object.keys(groupedDishes).forEach(category => { %>
                    <optgroup label="<%= category.charAt(0).toUpperCase() + category.slice(1) %>">
                        <% groupedDishes[category].forEach(dish => { %>
                            <option value="<%= dish._id %>" data-price="<%= dish.price %>">
                                <%= dish.name %>
                            </option>
                        <% }) %>
                    </optgroup>
                <% }) %>
            </select>
            <button type="button" id="mini_add_dish_button" class="add_dish_button">Add</button>
        </div>

        <table id="mini_order_table" style="display:none;">
            <thead>
                <tr>
                    <th>Dish</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
            </tbody>

        </table>

        <div class="form-group">
            <label for="mini_total_amount">Total Amount ($):</label>
            <input type="number" id="mini_total_amount" disabled value="0.00">
        </div>

        <button id="submitMiniOrder" class="submit-button">Submit Order</button>
    </div>
</div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("miniOrderModal");
    const closeModal = document.getElementById("closeMiniOrderModal");
    const dishSelector = document.getElementById("mini_dish_selector");
    const addDishButton = document.getElementById("mini_add_dish_button");
    const miniOrderTable = document.getElementById("mini_order_table");
    const miniOrderTableBody = miniOrderTable.querySelector("tbody");
    const totalAmountInput = document.getElementById("mini_total_amount");
    const mainOrderTable = document.getElementById("table_table");
    const mainOrderTableBody = mainOrderTable.querySelector("tbody");
    const submitOrderButton = document.getElementById("submitMiniOrder");
    const submitTableButton = document.querySelector('.submit-button'); // Submit button for the form
    const orderDataInput = document.getElementById('order_data'); // Hidden input for order data
    const staffInChargeInput = document.getElementById('staff_in_charge'); // Staff in charge input field
    const totalAmountMainScreen = document.getElementById("total_amount"); // Total amount on the main screen
    const addOrderButton = document.querySelector('.add-order-button');

    let orderItems = [];

    // Show the modal when the "Add Order" button is clicked
    addOrderButton.addEventListener("click", function (event) {
        event.preventDefault();
        modal.style.display = "block";
    });

    // Close the modal when clicking the close button or outside the modal
    closeModal.onclick = function () {
        modal.style.display = "none";
    };
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    };

    // Add a dish to the mini order table when the "Add" button is clicked
    addDishButton.addEventListener("click", function () {
        const selectedDish = dishSelector.options[dishSelector.selectedIndex];
        const dishId = selectedDish.value;
        const dishName = selectedDish.text;
        const dishPrice = parseFloat(selectedDish.getAttribute("data-price"));

        // Check if the dish is already in the order (in the modal)
        const existingDish = orderItems.find(item => item.dishId === dishId);
        if (existingDish) {
            existingDish.quantity += 1;
        } else {
            orderItems.push({
                dishId,
                dishName,
                dishPrice,
                quantity: 1
            });
        }
        updateMiniOrderTable();
    });

    // Update the mini order table when a dish is added
    function updateMiniOrderTable() {
        miniOrderTableBody.innerHTML = "";

        orderItems.forEach(item => {
            const row = document.createElement("tr");

            const dishCell = document.createElement("td");
            dishCell.textContent = item.dishName;
            row.appendChild(dishCell);

            const priceCell = document.createElement("td");
            priceCell.textContent = `$${item.dishPrice.toFixed(2)}`;
            row.appendChild(priceCell);

            const quantityCell = document.createElement("td");
            quantityCell.textContent = item.quantity;
            row.appendChild(quantityCell);

            const totalCell = document.createElement("td");
            totalCell.textContent = `$${(item.dishPrice * item.quantity).toFixed(2)}`;
            row.appendChild(totalCell);

            const actionsCell = document.createElement("td");
            const removeButton = document.createElement("button");
            removeButton.textContent = "Remove";
            removeButton.addEventListener("click", function () {
                removeMiniOrderItem(item.dishId);
            });
            actionsCell.appendChild(removeButton);
            row.appendChild(actionsCell);

            miniOrderTableBody.appendChild(row);
        });

        miniOrderTable.style.display = orderItems.length > 0 ? "table" : "none";
        updateTotalAmount();
    }

    // Update the total amount in the mini order table
    function updateTotalAmount() {
        const totalAmount = orderItems.reduce((total, item) => total + item.dishPrice * item.quantity, 0);
        totalAmountInput.value = totalAmount.toFixed(2);
    }

    // Remove an item from the mini order table
    function removeMiniOrderItem(dishId) {
        orderItems = orderItems.filter(item => item.dishId !== dishId);
        updateMiniOrderTable();
    }

// Transfer items to the main order table
function transferToMainOrderTable() {
    let totalAmount = 0; // Initialize total amount

    orderItems.forEach(item => {
        const existingRow = Array.from(mainOrderTableBody.querySelectorAll("tr")).find(
            row => row.dataset.dishId === item.dishId
        );

        if (existingRow) {
            // Update quantity and total for existing item
            const quantityCell = existingRow.querySelector(".quantity-input");
            const totalCell = existingRow.querySelector(".total-cell");

            const currentQuantity = parseInt(quantityCell.value, 10);
            const newQuantity = currentQuantity + item.quantity;

            quantityCell.value = newQuantity;
            totalCell.textContent = `$${(newQuantity * item.dishPrice).toFixed(2)}`;
        } else {
            // Add new row for the new item
            const newRow = document.createElement("tr");
            newRow.dataset.dishId = item.dishId;

            const dishCell = document.createElement("td");
            dishCell.textContent = item.dishName;
            newRow.appendChild(dishCell);

            const priceCell = document.createElement("td");
            priceCell.textContent = `$${item.dishPrice.toFixed(2)}`;
            newRow.appendChild(priceCell);

            const quantityCell = document.createElement("td");
            const quantityInput = document.createElement("input");
            quantityInput.type = "number";
            quantityInput.className = "quantity-input";
            quantityInput.step = "1";
            quantityInput.value = item.quantity;
            quantityInput.min = "0";
            quantityInput.disabled = true; // Disable the input directly here
            quantityCell.appendChild(quantityInput);
            newRow.appendChild(quantityCell);

            const totalCell = document.createElement("td");
            totalCell.className = "total-cell";
            totalCell.textContent = `$${(item.dishPrice * item.quantity).toFixed(2)}`;
            newRow.appendChild(totalCell);

            mainOrderTableBody.appendChild(newRow);
        }

        // Accumulate total amount
        totalAmount += item.dishPrice * item.quantity;
    });

    // Hide "No order placed" row if there are items
    toggleNoOrdersRow();

    // Reset the mini order table and close the modal
    orderItems = []
    updateMiniOrderTable();
    modal.style.display = "none";

    // Hide "Add Order" button
    addOrderButton.style.display = "none";

    // Update the total amount on the main screen
    totalAmountMainScreen.value = totalAmount.toFixed(2); // Update the total amount in the main screen
}

    // Function to toggle the "No orders placed" row visibility
    function toggleNoOrdersRow() {
        const noOrdersRow = mainOrderTableBody.querySelector(".no-orders");
        if (orderItems.length > 0) {
            noOrdersRow.style.display = "none";
        } else {
            noOrdersRow.style.display = "table-row";
        }
    }

    // Handle "Submit Order" button click
    submitOrderButton.addEventListener("click", function () {
        if (orderItems.length === 0) {
            alert("Please add at least one dish to the order.");
            return;
        }

        transferToMainOrderTable();
    });

// Submit the main order table data through POST method when the form is submitted
submitTableButton.addEventListener("click", function (event) {
    event.preventDefault();
    let orderItemsOnMain = [];
    // Loop through each row in the order table
    const rows = mainOrderTableBody.querySelectorAll("tr");
    rows.forEach(row => {
        // Skip the "No orders placed" row
        if (row.classList.contains("no-orders")) {
            return;
        }
        const dishId = row.dataset.dishId;
        const dishName = row.querySelector("td:nth-child(1)").textContent;  // Dish name
        const dishPrice = parseFloat(row.querySelector("td:nth-child(2)").textContent.replace("$", "")); // Price
        const quantity = parseInt(row.querySelector(".quantity-input").value, 10);  // Quantity
        const total = parseFloat(row.querySelector(".total-cell").textContent.replace("$", "")); // Total

        orderItemsOnMain.push({
            dishId,
            dishName,
            dishPrice,
            quantity,
            total
        });
    });


    // Get the staff in charge value from the input field
    const staffInCharge = staffInChargeInput.value;

    // Prepare the order data for the currentOrder field
    const orderDetails = orderItemsOnMain.map(item => ({
        dishId: item.dishId,
        quantity: item.quantity
    }));

    const totalAmount = orderItemsOnMain.reduce((total, item) => total + item.dishPrice * item.quantity, 0);

    // Create the order data object
    if (orderItemsOnMain.length !== 0) {
            const orderData = {
            staff_in_charge: staffInCharge,
            status: 'PENDING',
            order_details: JSON.stringify(orderDetails),
            total_amount: totalAmount.toFixed(2)  // Ensure it's a string with two decimal points
        };
        orderDataInput.value = JSON.stringify(orderData); 
    }

    // Submit the form
    document.querySelector("form").submit();
});


});
</script>
